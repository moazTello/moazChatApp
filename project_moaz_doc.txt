Cd in terminal to frontend folder 
Run -> npm create vite@latest .
Choose React then javascript
Then -> npm I
Then -> npm run dev

Cd to root project folder (chatmoaz) in our project
Then npm init -y         <<<<<< to create package.json file 

In the package.json replace index.js to server.js like this 


{
  "name": "chatproject",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",         <<<<<<  server.js 
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}


Then under the root installing the required packages 

npm install express dotenv cookie-parser bcryptjs mongoose socket.io jsonwebtoken

Then create file server.js in backend folder 

That file will be 

const express = require("express")

const app = express();

app.listen(9000,()=> console.log('server running on port 9000'))

And then in root package.json replace the script test with 

{
  "name": "chatproject",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"          <<<<<.  "server" : "node backend/server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cookie-parser": "^1.4.6",
    "dotenv": "^16.4.4",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.1.2",
    "socket.io": "^4.7.4"
  }
}

Then we can run our server by running 
npm run server 

Then we will use nodemon cause we don't want to terminate the server every time 

npm install nodemon --seave-dev

Then we can replace node in the root package.json from node to nodemon
"server" : "node backend/server.js"     <<<<<.      "server":"nodemon backend/server.js"

We don't want to declare the port every time we will add PORT to the server.js like this 

const express = require("express")

const app = express();

const PORT = process.env.PORT || 9000;

app.get("/",(req,res) => {
    //root route http://localhost:9000
    res.send('server is ready!')
});

app.listen(9000,()=> console.log('server running on port 9000'))

And we will add a file .env to the root to declare the PORT

(Make sure that you have dotenv extension in your VScode)

(This PORT will not running if we didn't install dotenv and use it ! )

So in the server.js we will add 

const dotenv = require("dotenv");

dotenv.config();


Then to use 
Import express from "express";      instead of  const express = require("express");

We should declare that in package.js file 

So under scripts {}
Add 
"type":"module"

Like this 
  "scripts": {
    "server": "nodemon backend/server.js"
  },
  "type":"module",

And in the server replace 

// const express = require("express");     <<<<  replace it
import express from "express";
// const dotenv = require("dotenv");      <<<<< replace it
import dotenv from "dotenv";


Instead of make all of get method in server.js we will use middleware 

// const express = require("express");
import express from "express";
// const dotenv = require("dotenv");
import dotenv from "dotenv";
const app = express();
dotenv.config();
const PORT = process.env.PORT || 9000;

app.get("/",(req,res) => {
    //root route http://localhost:9000
    res.send(`server is ready on port ${PORT}`)
});


app.get('/api/auth/signup',(req,res) => {       <<<<<<
    console.log('sign route');			<<<<<<
});						<<<<<<

app.get('/api/auth/login',(req,res) => {	<<<<<<
    console.log('login route');			<<<<<<
});						<<<<<<
	
app.get('/api/auth/logout',(req,res) => {	<<<<<<
    console.log('logout route');		<<<<<<
});						<<<<<<
		
app.listen(PORT,()=> console.log(`server running on port ${PORT}`))

That will be ugly for server.js file so 
We will use middleware

// const express = require("express");
import express from "express";
// const dotenv = require("dotenv");
import dotenv from "dotenv";
const app = express();
dotenv.config();
const PORT = process.env.PORT || 9000;

app.get("/",(req,res) => {
    //root route http://localhost:9000
    res.send(`server is ready on port ${PORT}`)
});

app.use("/api/auth",authRoutes);	      <<<<<<


app.listen(PORT,()=> console.log(`server running on port ${PORT}`))

So in the backend create routes folder and in routes folder create file called authRoutes

import express from "express";

const router = express.Router();

router.get("login")


router.get('/signup',(req,res) => {
    res.send('sign route');
    console.log('sign route');
});

router.get('/login',(req,res) => {
    res.send('login route');
    console.log('login route');
});

router.get('/logout',(req,res) => {
    res.send('logout route');
    console.log('logout route');
});

export default router;

But if we add a lot of lines in each of that functions in router.get('/signup',(req,res) => {
    res.send('sign route');
    console.log('sign route');
});
That will be hard so we will use controllers
Create a folder called controllers and create a file in it called auth.controller.js
And in it 

export const login = (req,res) => {
    console.log("loged in user");
    res.send('login user')
}

export const logout = (req,res) => {
    console.log("logout user");
    res.send('logout user')
}

export const signup = (req,res) => {
    console.log("signup user");
    res.send('signup user')
}

And in authRoutes

import express from "express";
import { signup, login, logout } from "../controllers/auth.controller.js";

const router = express.Router();

router.get("login")


router.get('/signup',signup);

router.get('/login',login);

router.get('/logout',logout);

export default router;

Then we will go to mongodb website and create a new project and create a new deployment in that project 

The password from the deploy and the username is important 

tellommt95
9jZGBkdBod0HqRwb
Then when we connect to deployment we will get the connection like this 

mongodb+srv://tellommt95:<password>@cluster0.swyfuc8.mongodb.net/?retryWrites=true&w=majority

So we will 
MONGO_DB_URL = mongodb+srv://tellommt95:<password>@cluster0.swyfuc8.mongodb.net/?retryWrites=true&w=majority
And replace <password> with  9jZGBkdBod0HqRwb and add after swyfuc8.mongodb.net/(database name)

Like that 
MONGO_DB_URL = mongodb+srv://tellommt95:9jZGBkdBod0HqRwb@cluster0.swyfuc8.mongodb.net/chat-app-db?retryWrites=true&w=majority

Then create a folder at the root called db and in it create a file connectToMongoDb.js
-->>
import mongoose from 'mongoose';

const connectToMongoDB = async () => {
    try{ 
        await mongoose.connect(process.env.MONGO_DB_URL);
        console.log('connected to mongo db')
    }
    catch(err){
        console.log('error when try to connect to mongodb ',err.message)
    }
}

export default connectToMongoDB;

And don't forget to declare MONGO_DB_URL in .env file like this 

PORT = 8000
MONGO_DB_URL = mongodb+srv://tellommt95:9jZGBkdBod0HqRwb@cluster0.swyfuc8.mongodb.net/chat-app-db?retryWrites=true&w=majority

The authcontroller.js file will be 

import bcrypt from "bcryptjs";                   <<<<< this line for hashing the password 
import User from "../models/user.model.js";	 <<<<< this is the user table(model) from the database

export const login = (req,res) => {
    console.log("loged in user");
    res.send('login user')
}

export const logout = (req,res) => {
    console.log("logout user");
    res.send('logout user')
}

export const signup = async (req,res) => {
    try{
        const { fullName, userName,password, confirmPassword, gender } = req.body;     <<<<< the front will send this post request to the backend and send this attributes in the body request
        if(password !== confirmPassword){					       <<<<< check the confirm password
            return res.status(400).json({"message":"confirm your password please"});
        }
        const user = await User.findOne({ userName });				       <<<<< check if the user is exists in the database or not 
        if (user) {
            return res.status(400).json({"message":"this userName is exists !"});
        }
        // HASH PASSWORD HERE

        const salt = await bcrypt.genSalt(10);					       <<<<< this is the hash func that will added to password (must be no more than 10 ) 
        const hashedPassword = await bcrypt.hash(password,salt)

        //https://avatart-placeholder.iran.liara.run/girl
        const boyProfilePic = `https://avatart.iran.liara.run/boy?username=${userName}`;        <<<<<< this is the icons for users 
        const girlProfilePic = `https://avatart.iran.liara.run/girl?username=${userName}`;      <<<<<< this is the icons for users

        const newUser = new User({								<<<<<< create an instance from the user to create a new user
            fullname:fullName,
            username:userName,
            password:hashedPassword,								<<<<<< saving the hashed password
            gender:gender,
            profilePic:gender === 'male' ? boyProfilePic : girlProfilePic
        });
        await newUser.save();									<<<<<< save the new user
        res.status(201).json({
            _id:newUser._id,
            fullname:newUser.fullname,
            username:newUser.username,
            profilePic:newUser.profilePic
        });

    }
    catch(err){
        console.log(err)
        res.status(500).json({
            "message":"internal server error "
        })
    }
}

Now we will create JWT 
Create a new folder in backend called utils and create a new file called generateToken.js

Ad this to .env file 
JWT_SECRET = DBASJDKADSA
And in new terminal and run 
->> openssl rand -base64 32
That will generate a new screw key 
Replace it with JWT_SECRET
JWT_SECRET = sAtA2aX6gBEKrGeeisLxujiHZswBfoU9Q5XijJ1DRyQ=

And the generateToken.js will be 

import jwt from "jsonwebtoken";

const generateTokenAndSetCookie = (userId,res) => {
    const token = jwt.sign({userId},process.env.JWT_SECRET,{
        expiresIn:'15d'
    })
    res.cookie("jwt",token,{
        maxAge:15*24*60*60*1000, //milliseconds
        httpOnly:true, //prevent any request from other http (for attackers)
        sameSite:"strict"
    })
}
export default generateTokenAndSetCookie;

And then use that generateToken 
if(newUser){
            generateTokenAndSetCookie(newUser._id,res)        <<<<<<<<<<<<
            await newUser.save();
            res.status(201).json({
            _id:newUser._id,
            fullname:newUser.fullname,
            username:newUser.username,
            profilePic:newUser.profilePic
        });
        }
 Add this to .env file 
NODE_ENV = development         to make the secure mode for development when we request from postman
And use it in generateToken.js file 
import jwt from "jsonwebtoken";

const generateTokenAndSetCookie = (userId,res) => {
    const token = jwt.sign({userId},process.env.JWT_SECRET,{
        expiresIn:'15d'
    })
    res.cookie("jwt",token,{
        maxAge:15*24*60*60*1000, //milliseconds
        httpOnly:true, //prevent any request from other http (for attackers)
        sameSite:"strict",
        secure:process.env.NODE_ENV !== "development"                        <<<<<<<<<
    })
}
export default generateTokenAndSetCookie;















Be fore begin front 
Git init in the root
Move .gitignor from frontend to the root 
Add .env to the .gitignore

Cd fronend
Terminal ->
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

And replace tailwind.config.js to ->
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

The add this to index.css

@tailwind base;
@tailwind components;
@tailwind utilities;

Then we will using daisy with tailwinds

In frontend terminal
npm i -D daisyui@latest
And in tailwind.config.js 
plugins: [require("daisyui")],
So the tailwind.config.js will be 
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [require("daisyui")],
}
